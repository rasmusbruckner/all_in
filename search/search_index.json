{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"All-In Python","text":"<p>This is the official documentation for the <code>allinpy</code> Python package.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install the package using:</p> <pre><code>pip install allinpy\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Here's how to use <code>allinpy</code> in your Python project:</p> <pre><code>from allinpy.utils import safe_div\nresult = safe_div(10, 2)\nprint(result)\n</code></pre> <p>For full API details, see the API Reference.</p>"},{"location":"about/","title":"About","text":"<p>I'm Rasmus Bruckner, a cognitive neuroscientist specializing in computational modeling of learning and decision-making. My research focuses on how humans adapt to uncertainty, integrating behavioral experiments with neuroimaging and computational approaches.</p> <p>The <code>allinpy</code> package is increasingly used in our data analysis projects. </p> <p>Currently, I work at the University of Hamburg and Freie Universit\u00e4t Berlin. I also serve as a PI in the DFG Research Unit 5389, which investigates contextual influences on dynamic belief updating in volatile environments.</p> <p>Visit my Google Scholar profile for publications. Here's my GitHub and Bluesky.</p>"},{"location":"io_utils/","title":"IO Utilities Module","text":""},{"location":"io_utils/#allinpy.io_utils","title":"<code>io_utils</code>","text":""},{"location":"io_utils/#allinpy.io_utils.file_utils","title":"<code>file_utils</code>","text":""},{"location":"io_utils/#allinpy.io_utils.file_utils.get_df_subj","title":"<code>get_df_subj(df, i)</code>","text":"<p>This function creates a subject-specific data frame with adjusted index.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Subject data frame.</p> required <code>i</code> <code>int</code> <p>Subject number.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Index-adjusted subject-specific data frame (df_subj).</p> Source code in <code>allinpy/io_utils/file_utils.py</code> <pre><code>def get_df_subj(df: pd.DataFrame, i: int) -&gt; pd.DataFrame:\n    \"\"\"This function creates a subject-specific data frame with adjusted index.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        Subject data frame.\n    i : int\n        Subject number.\n\n    Returns\n    -------\n    pd.DataFrame\n        Index-adjusted subject-specific data frame (df_subj).\n    \"\"\"\n\n    df_subj = df[(df[\"subj_num\"] == i + 1)].copy()\n    df_subj = df_subj.reset_index(drop=True)  # adjust index\n\n    return df_subj\n</code></pre>"},{"location":"io_utils/#allinpy.io_utils.file_utils.load_data","title":"<code>load_data(f_names, expected_n_trials=400)</code>","text":"<p>This function loads the adaptive learning BIDS data and checks if they are complete.</p> <p>Parameters:</p> Name Type Description Default <code>f_names</code> <code>list[Path]</code> <p>List with all file names.</p> required <code>expected_n_trials</code> <code>int</code> <p>Expected number of trials.</p> <code>400</code> <p>Returns:</p> Name Type Description <code>pd</code> <code>DataFrame</code> <p>Data frame that contains all data.</p> Source code in <code>allinpy/io_utils/file_utils.py</code> <pre><code>def load_data(f_names: list[Path], expected_n_trials: int = 400) -&gt; pd.DataFrame:\n    \"\"\"This function loads the adaptive learning BIDS data and checks if they are complete.\n\n    Parameters\n    ----------\n    f_names : list[Path]\n        List with all file names.\n    expected_n_trials : int\n        Expected number of trials.\n\n    Returns\n    -------\n    pd:DataFrame\n        Data frame that contains all data.\n    \"\"\"\n\n    all_dfs = []\n    n_trials = []\n\n    for i, fname in enumerate(f_names):\n        df = pd.read_csv(fname, sep=\"\\t\", header=0)\n\n        n = len(df)\n        n_trials.append(n)\n\n        if n_trials[-1] != expected_n_trials:\n            print(f\"{fname}: {n} trials\")\n\n        df[\"trial\"] = np.arange(n, dtype=np.int64)\n        all_dfs.append(df)\n\n    all_data = pd.concat(all_dfs, ignore_index=True)\n\n    return all_data\n</code></pre>"},{"location":"io_utils/#allinpy.io_utils.file_utils.sorted_nicely","title":"<code>sorted_nicely(input_list)</code>","text":"<p>This function sorts the given iterable in the way that is expected.</p> <p>Obtained from: https://arcpy.wordpress.com/2012/05/11/sorting-alphanumeric-strings-in-python</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>The iterable to be sorted.</p> required <p>Returns:</p> Type Description <code>list</code> <p>Sorted iterable.</p> Source code in <code>allinpy/io_utils/file_utils.py</code> <pre><code>def sorted_nicely(input_list: list) -&gt; list:\n    \"\"\"This function sorts the given iterable in the way that is expected.\n\n    Obtained from:\n    https://arcpy.wordpress.com/2012/05/11/sorting-alphanumeric-strings-in-python\n\n    Parameters\n    ----------\n    input_list : list\n        The iterable to be sorted.\n\n    Returns\n    -------\n    list\n        Sorted iterable.\n    \"\"\"\n\n    convert = lambda text: int(text) if text.isdigit() else text\n    alphanum_key = lambda key: [convert(c) for c in re.split(\"([0-9]+)\", key)]\n\n    return sorted(input_list, key=alphanum_key)\n</code></pre>"},{"location":"io_utils/#allinpy.io_utils.file_utils.get_file_paths","title":"<code>get_file_paths(folder_path, identifier)</code>","text":"<p>This function extracts the file path.</p> <p>Parameters:</p> Name Type Description Default <code>folder_path</code> <code>Path</code> <p>Relative path to current folder.</p> required <code>identifier</code> <code>Path</code> <p>Identifier for file of interest.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>Absolute path to file (file_paths).</p> Source code in <code>allinpy/io_utils/file_utils.py</code> <pre><code>def get_file_paths(folder_path: Path, identifier: str) -&gt; list[str]:\n    \"\"\"This function extracts the file path.\n\n    Parameters\n    ----------\n    folder_path : Path\n        Relative path to current folder.\n    identifier : Path\n        Identifier for file of interest.\n\n    Returns\n    -------\n    list[str]\n        Absolute path to file (file_paths).\n    \"\"\"\n\n    file_paths = []\n    for path, subdirs, files in os.walk(folder_path):\n\n        for name in files:\n            if fnmatch(name, identifier):\n                file_paths.append(os.path.join(path, name))\n\n    return file_paths\n</code></pre>"},{"location":"plotting/","title":"Plotting Module","text":""},{"location":"plotting/#allinpy.plotting","title":"<code>plotting</code>","text":""},{"location":"plotting/#allinpy.plotting.plot_utils","title":"<code>plot_utils</code>","text":""},{"location":"plotting/#allinpy.plotting.plot_utils.latex_plt","title":"<code>latex_plt(matplotlib)</code>","text":"<p>This function updates the matplotlib library to use Latex and changes some default plot parameters.</p> <p>Parameters:</p> Name Type Description Default <code>matplotlib</code> <code>module</code> <p>The matplotlib module (e.g., <code>import matplotlib</code>) to configure.</p> required <p>Returns:</p> Type Description <code>module</code> <p>The updated matplotlib module with LaTeX and custom settings applied.</p> Source code in <code>allinpy/plotting/plot_utils.py</code> <pre><code>def latex_plt(matplotlib: types.ModuleType) -&gt; types.ModuleType:\n    \"\"\"This function updates the matplotlib library to use Latex and changes some default plot parameters.\n\n    Parameters\n    ----------\n    matplotlib : module\n        The matplotlib module (e.g., `import matplotlib`) to configure.\n\n    Returns\n    -------\n    module\n        The updated matplotlib module with LaTeX and custom settings applied.\n    \"\"\"\n\n    pgf_with_latex = {\n        \"axes.labelsize\": 6,\n        \"font.size\": 6,\n        \"legend.fontsize\": 6,\n        \"axes.titlesize\": 6,\n        \"xtick.labelsize\": 6,\n        \"ytick.labelsize\": 6,\n        \"figure.titlesize\": 6,\n        \"pgf.rcfonts\": False,\n    }\n    matplotlib.rcParams.update(pgf_with_latex)\n\n    return matplotlib\n</code></pre>"},{"location":"plotting/#allinpy.plotting.plot_utils.cm2inch","title":"<code>cm2inch(*tupl)</code>","text":"<p>This function converts cm to inches.</p> <p>Obtained from: https://stackoverflow.com/questions/14708695/ specify-figure-size-in-centimeter-in-matplotlib/22787457</p> <p>Parameters:</p> Name Type Description Default <code>tupl</code> <code>float or tuple of float</code> <p>Size of the plot in centimeters. Can be provided as individual float arguments (e.g., width, height) or as a single tuple of floats.</p> <code>()</code> <p>Returns:</p> Type Description <code>tuple of float</code> <p>Converted image size in inches.</p> Source code in <code>allinpy/plotting/plot_utils.py</code> <pre><code>def cm2inch(*tupl: Union[float, Tuple[float, ...]]) -&gt; Tuple[float, ...]:\n    \"\"\"This function converts cm to inches.\n\n    Obtained from: https://stackoverflow.com/questions/14708695/\n    specify-figure-size-in-centimeter-in-matplotlib/22787457\n\n    Parameters\n    ----------\n    tupl : float or tuple of float\n        Size of the plot in centimeters. Can be provided as individual float arguments (e.g., width, height)\n        or as a single tuple of floats.\n\n    Returns\n    -------\n    tuple of float\n        Converted image size in inches.\n\n    \"\"\"\n\n    inch = 2.54\n    if isinstance(tupl[0], tuple):\n        return tuple(i / inch for i in tupl[0])\n    else:\n        return tuple(i / inch for i in tupl)\n</code></pre>"},{"location":"plotting/#allinpy.plotting.plot_utils.label_subplots","title":"<code>label_subplots(f, texts, x_offset=-0.07, y_offset=0.015)</code>","text":"<p>This function labels the subplots.</p> <p>Obtained from: https://stackoverflow.com/questions/52286497/ matplotlib-label-subplots-of-different-sizes-the-exact-same-distance-from-corner</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>Figure</code> <p>Matplotlib figure handle containing the subplots.</p> required <code>texts</code> <code>sequence of str</code> <p>List of labels for each subplot (e.g., [\"A\", \"B\", \"C\"]).</p> required <code>x_offset</code> <code>float or sequence of float</code> <p>Horizontal offset(s) for the subplot labels. If a single float, the same offset is applied to all subplots. Default is -0.07.</p> <code>-0.07</code> <code>y_offset</code> <code>float or sequence of float</code> <p>Vertical offset(s) for the subplot labels. If a single float, the same offset is applied to all subplots. Default is 0.015.</p> <code>0.015</code> <p>Returns:</p> Type Description <code>None</code> <p>This function does not return any value.</p> Source code in <code>allinpy/plotting/plot_utils.py</code> <pre><code>def label_subplots(\n    f: Figure,\n    texts: Sequence[str],\n    x_offset: Union[float, Sequence[float]] = -0.07,\n    y_offset: Union[float, Sequence[float]] = 0.015,\n) -&gt; None:\n    \"\"\"This function labels the subplots.\n\n    Obtained from: https://stackoverflow.com/questions/52286497/\n    matplotlib-label-subplots-of-different-sizes-the-exact-same-distance-from-corner\n\n    Parameters\n    ----------\n    f : matplotlib.figure.Figure\n        Matplotlib figure handle containing the subplots.\n    texts : sequence of str\n        List of labels for each subplot (e.g., [\"A\", \"B\", \"C\"]).\n    x_offset : float or sequence of float, optional\n        Horizontal offset(s) for the subplot labels.\n        If a single float, the same offset is applied to all subplots.\n        Default is -0.07.\n    y_offset : float or sequence of float, optional\n        Vertical offset(s) for the subplot labels.\n        If a single float, the same offset is applied to all subplots.\n        Default is 0.015.\n\n    Returns\n    -------\n    None\n        This function does not return any value.\n    \"\"\"\n\n    # Get axes\n    axes = f.get_axes()\n\n    if isinstance(x_offset, float):\n        x_offset = np.repeat(x_offset, len(axes))\n\n    if isinstance(y_offset, float):\n        y_offset = np.repeat(y_offset, len(axes))\n\n    # Cycle over subplots and place labels\n    axis_counter = 0\n    for a, l in zip(axes, texts):\n        x = a.get_position().x0\n        y = a.get_position().y1\n        f.text(x - x_offset[axis_counter], y + y_offset[axis_counter], l, size=12)\n        axis_counter += 1\n</code></pre>"},{"location":"reference/","title":"API Reference","text":"<p>Welcome to the API Reference of the <code>allinpy</code> package.</p> <ul> <li>Utils Module: General utility functions.</li> <li>Plotting Module: Plot formatting and display utilities.</li> <li>IO Utilities Module: Input/output helper functions.</li> </ul>"},{"location":"utils/","title":"Utils Module","text":""},{"location":"utils/#allinpy.utils","title":"<code>utils</code>","text":""},{"location":"utils/#allinpy.utils.utilities","title":"<code>utilities</code>","text":""},{"location":"utils/#allinpy.utils.utilities.safe_div","title":"<code>safe_div(x, y)</code>","text":"<p>This function divides two numbers and avoids division by zero.</p> <p>Obtained from:     https://www.yawintutor.com/zerodivisionerror-division-by-zero/</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int or float</code> <p>Numerator.</p> required <code>y</code> <code>int or float</code> <p>Denominator. If zero, returns 0.0 to avoid ZeroDivisionError.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Result of the division. Returns 0.0 if the denominator is zero.</p> <p>Examples:</p> <p>safe_div(10, 2) 5.0</p> <p>safe_div(10, 0) 0.0</p> Source code in <code>allinpy/utils/utilities.py</code> <pre><code>def safe_div(x: Union[int, float], y: Union[int, float]) -&gt; float:\n    \"\"\"This function divides two numbers and avoids division by zero.\n\n    Obtained from:\n        https://www.yawintutor.com/zerodivisionerror-division-by-zero/\n\n    Parameters\n    ----------\n    x : int or float\n        Numerator.\n    y : int or float\n        Denominator. If zero, returns 0.0 to avoid ZeroDivisionError.\n\n    Returns\n    -------\n    float\n        Result of the division. Returns 0.0 if the denominator is zero.\n\n    Examples\n    --------\n    safe_div(10, 2)\n    5.0\n\n    safe_div(10, 0)\n    0.0\n    \"\"\"\n\n    if y == 0:\n        return 0.0\n    return x / y\n</code></pre>"},{"location":"utils/#allinpy.utils.utilities.callback","title":"<code>callback(show_ind_prog, pbar)</code>","text":"<p>Update the progress bar if enabled.</p> <p>Parameters:</p> Name Type Description Default <code>show_ind_prog</code> <code>bool</code> <p>Flag indicating whether the progress bar should be updated.</p> required <code>pbar</code> <code>tqdm</code> <p>Progress-bar-object instance.</p> required <p>Returns:</p> Type Description <code>None</code> <p>This function does not return any value.</p> Source code in <code>allinpy/utils/utilities.py</code> <pre><code>def callback(show_ind_prog: bool, pbar: tqdm) -&gt; None:\n    \"\"\"Update the progress bar if enabled.\n\n    Parameters\n    ----------\n    show_ind_prog : bool\n        Flag indicating whether the progress bar should be updated.\n    pbar : tqdm.tqdm\n         Progress-bar-object instance.\n\n    Returns\n    -------\n    None\n        This function does not return any value.\n    \"\"\"\n\n    if show_ind_prog:\n        pbar.update()\n</code></pre>"}]}